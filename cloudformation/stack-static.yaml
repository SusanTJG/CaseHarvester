AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabaseMasterPassword:
    Type: String
    NoEcho: True
  DatabaseMasterUsername:
    Type: String
    NoEcho: True
  EnvironmentType:
    Description: The environment type (prod or dev)
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must be a prod or dev
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16
  VPCPublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  VPCPublicSubnet1AZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a
  VPCPublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  VPCPublicSubnet2AZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b
  VPCPrivateSubnetCidr:
    Type: String
    Default: 10.0.2.0/24
  VPCPrivateSubnetAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

Mappings:
  Environment:
    DBInstanceIdentifier:
      prod: mjcs
      dev: dev-mjcs
    BucketName:
      prod: mjcs-case-details
      dev: dev-mjcs-case-details

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: True
      EnableDnsHostnames: True

  VPCPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VPCPublicSubnet1AZ
      CidrBlock: !Ref VPCPublicSubnet1Cidr
      VpcId: !Ref VPC

  VPCPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VPCPublicSubnet2AZ
      CidrBlock: !Ref VPCPublicSubnet2Cidr
      VpcId: !Ref VPC

  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCInternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPCInternetGateway
      VpcId: !Ref VPC

  VPCIGRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  VPCIGRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
      RouteTableId: !Ref VPCIGRouteTable
    DependsOn: VPCInternetGatewayAttach

  VPCIGRouteTablePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCIGRouteTable
      SubnetId: !Ref VPCPublicSubnet1

  VPCIGRouteTablePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCIGRouteTable
      SubnetId: !Ref VPCPublicSubnet2

  VPCPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VPCPrivateSubnetAZ
      CidrBlock: !Ref VPCPrivateSubnetCidr
      VpcId: !Ref VPC

  VPCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  VPCNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt VPCEIP.AllocationId
      SubnetId: !Ref VPCPublicSubnet1

  VPCNATRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  VPCNATRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPCNATGateway
      RouteTableId: !Ref VPCNATRouteTable
    DependsOn: VPCInternetGatewayAttach

  VPCNATRouteTablePrivateSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCNATRouteTable
      SubnetId: !Ref VPCPrivateSubnet

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:
        - !Ref VPCPublicSubnet1
        - !Ref VPCPublicSubnet2

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Controls access to Case Harvester database
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Anywhere
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp

  Database:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    Properties:
      AllocatedStorage: 20 # GB
      BackupRetentionPeriod: 7 # days
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: !FindInMap [Environment, DBInstanceIdentifier, !Ref EnvironmentType]
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: postgres
      EngineVersion: 9.6.6
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      Port: 5432 # default
      PubliclyAccessible: True
      StorageType: gp2
      VPCSecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup
        - !Ref DatabaseSecurityGroup

  CaseDetailsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !FindInMap [Environment, BucketName, !Ref EnvironmentType]
      VersioningConfiguration:
        Status: Enabled

Outputs:
  DatabaseHostname:
    Description: Endpoint hostname for the database
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseHostname
  VPCDefaultSecurityGroupId:
    Description: VPC default security group ID
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-VPCDefaultSecurityGroupId
  VPCPrivateSubnetId:
    Description: Subnet 2 ID associated with database
    Value: !Ref VPCPrivateSubnet
    Export:
      Name: !Sub ${AWS::StackName}-VPCPrivateSubnetId
  CaseDetailsBucketName:
    Description: Case details S3 bucket name
    Value: !Ref CaseDetailsBucket
    Export:
      Name: !Sub ${AWS::StackName}-CaseDetailsBucketName
  CaseDetailsBucketArn:
    Description: Case details S3 bucket ARN
    Value: !GetAtt CaseDetailsBucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CaseDetailsBucketArn
